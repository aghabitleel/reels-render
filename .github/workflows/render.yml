name: Render Reel

on:
  repository_dispatch:
    types: [render_reel]

jobs:
  render:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Install Python dependencies
        run: |
          pip install moviepy requests
      
      - name: Create output directory
        run: mkdir -p output
      
      - name: Create render script
        run: |
          cat > render.py << 'EOF'
          import json
          import sys
          import requests
          from moviepy.editor import VideoFileClip, concatenate_videoclips, AudioFileClip
          from pathlib import Path
          
          # Get inputs from GitHub Actions
          audio_url = "${{ github.event.client_payload.audio_url }}"
          video_urls = json.loads('${{ toJSON(github.event.client_payload.video_urls) }}')
          out_name = "${{ github.event.client_payload.out_name }}"
          width = ${{ github.event.client_payload.width }}
          height = ${{ github.event.client_payload.height }}
          fps = ${{ github.event.client_payload.fps }}
          max_clips = ${{ github.event.client_payload.max_clips }}
          
          print(f"Processing {len(video_urls)} videos...")
          print(f"Audio URL: {audio_url}")
          
          # Download audio
          audio_path = "temp_audio.mp3"
          print(f"Downloading audio from {audio_url}...")
          audio_response = requests.get(audio_url)
          with open(audio_path, 'wb') as f:
              f.write(audio_response.content)
          
          # Download and process videos
          clips = []
          for i, video_url in enumerate(video_urls[:max_clips]):
              print(f"Downloading video {i+1}/{len(video_urls[:max_clips])}...")
              video_path = f"temp_video_{i}.mp4"
              video_response = requests.get(video_url)
              with open(video_path, 'wb') as f:
                  f.write(video_response.content)
              
              # Load and resize video
              clip = VideoFileClip(video_path)
              clip = clip.resize((width, height))
              clips.append(clip)
          
          print("Concatenating videos...")
          final_video = concatenate_videoclips(clips, method="compose")
          
          print("Adding audio...")
          audio = AudioFileClip(audio_path)
          
          # Match video duration to audio or vice versa
          if final_video.duration > audio.duration:
              final_video = final_video.subclip(0, audio.duration)
          else:
              audio = audio.subclip(0, final_video.duration)
          
          final_video = final_video.set_audio(audio)
          
          print(f"Writing output to output/{out_name}...")
          final_video.write_videofile(
              f"output/{out_name}",
              fps=fps,
              codec='libx264',
              audio_codec='aac'
          )
          
          print("Done!")
          EOF
      
      - name: Run render script
        run: python render.py
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rendered-reel
          path: output/*.mp4
          retention-days: 7
